(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{486:function(t,s,n){"use strict";n.r(s);var e=n(10),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("在开发中，处理用户交互大多都是通过响应者链和手势来解决的。比如，需要给一个 View 增加点击事件，一般都通过以下三种做法：")]),t._v(" "),n("ol",[n("li",[t._v("子类一个 UIView，重写 touch 相关都方法")]),t._v(" "),n("li",[t._v("添加一个 UIButton，通过 target-action 实现")]),t._v(" "),n("li",[t._v("添加 UITapGesture 实现")])]),t._v(" "),n("p",[t._v("可是既然有多种方案，如何选择合适都呢？这几种方案又有什么区别呢？")]),t._v(" "),n("h2",{attrs:{id:"ios-中都事件处理机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ios-中都事件处理机制"}},[t._v("#")]),t._v(" iOS 中都事件处理机制")]),t._v(" "),n("p",[t._v("当用户点击了屏幕，UIKit 需要把这个封装成一个事件，传递给最合适的 UIResponder 处理，即 第一响应者 First-Responder。\n如何找到最合适的响应者呢？UIKit 是通过 hit-test 机制来实现。")]),t._v(" "),n("p",[n("strong",[t._v("hit-test")])]),t._v(" "),n("div",{staticClass:"language-Swift extra-class"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hitTest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGPoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" with event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UIEvent")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UIView")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 如果在，则寻找最合适的 subView")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("point")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inside point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGPoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" with event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UIEvent")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Bool")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 判断是否在自己应该处理的范围")]),t._v("\n")])])]),n("ol",[n("li",[t._v("通过2判断是否点击在自己的范围")]),t._v(" "),n("li",[t._v("如果在，则标记自己为 hit view，接着倒叙遍历自己的 subviews，重复步骤1，如果找到返回新的 hit view，否则返回自己")]),t._v(" "),n("li",[t._v("如果不在，返回 nil")])]),t._v(" "),n("p",[t._v("查找顺序为：UIWindow -> rootVC.view -> suvView...")]),t._v(" "),n("p",[n("strong",[t._v("响应者链 UIResponder Chain")]),t._v("\n找到之后，则当前的这个 View 为第一响应者。即会根据情况触发以下几个方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("touchesBegan\ntouchesEnded\ntouchesMoved\ntouchesCancelled\n")])])]),n("p",[t._v("这些方法的默认实现即转发事件到响应者链，因此。调用 super 即会触发下个响应者继续相应。")]),t._v(" "),n("p",[n("strong",[t._v("UIControl")])]),t._v(" "),n("div",{staticClass:"language-Objective-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- (BOOL)beginTrackingWithTouch:(UITouch *)touch withEvent:(nullable UIEvent *)event;\n- (BOOL)continueTrackingWithTouch:(UITouch *)touch withEvent:(nullable UIEvent *)event;\n- (void)endTrackingWithTouch:(nullable UITouch *)touch withEvent:(nullable UIEvent *)event;\n- (void)cancelTrackingWithEvent:(nullable UIEvent *)event;\n")])])]),n("p",[t._v("UIControl 也有自己类似 touch 的方法，即 UIControl 内部会 touch 方法进行一些处理来满足 UIControlEvent 的抽象。")]),t._v(" "),n("p",[n("strong",[t._v("手势")])]),t._v(" "),n("p",[t._v("如果我们重写了 touch 方法，并且同时添加了手势，会怎么处理呢？")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("touchesBegan(_:with:) \t a      // 1\nonTap(_:) \t a \t 3              // 2\ntouchesCancelled(_:with:) \t a  // 3\n")])])]),n("p",[t._v("触发 begin，然后触发手势，如果手势识别了，则会 cancel，让手势处理事件。")])])}),[],!1,null,null,null);s.default=a.exports}}]);